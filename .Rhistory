c(-4, 4)
)
plot_product <- function(f, g, limits) {
plot(f, g, xlim = limits)
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
plot_product <- function(f, g, limits) {
h <- function(f, g) f * g
plot(h, xlim = limits)
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
plot_product <- function(f, g, limits) {
h <- function(f, g) f * g
plot(h, xlim = limits)
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
plot_product <- function(f, g, limits) {
plot(f * g, xlim = limits)
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
plot_product <- function(f, g, limits) {
h <- function(f, g) f * g
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
plot_product <- function(f, g, limits) {
h <- function(f, g) f * g
plot(h, xlim = c(-1,2))
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
plot_product <- function(f, g, limits) {
h <- function(f, g) f(x) * g(x)
plot(h, xlim = limits)
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
# Questão 2 ----
plot_product <- function(f, g, limits) {
h <- function(f, g, x) f(x) * g(x)
plot(h, xlim = limits)
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
plot_product <- function(f, g, limits) {
h <- function(x) f(x) * g(x)
plot(h, xlim = limits)
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
numeric(25)
[1:25]
c(1:25)
a <- numeric(25)
a[1] = sqrt(2)
for (i in c(2:25)) {
a[i] <- sqrt(2 * a[i-1])
}
cat(unlist(rev(strsplit(phrase, " ")))) a
a
a[25] == 2
a[25] - 2
# Questão 3 ----
a <- numeric(25)
a[1] = sqrt(2)
for (i in c(2:25)) {
a[i] <- sqrt(2 * a[i-1])
cat(a[i])
}
# Questão 3 ----
a <- numeric(25)
a[1] = sqrt(2)
for (i in c(2:25)) {
a[i] <- sqrt(2 * a[i-1])
print(a[i])
}
diag(c(1,1))
matrix(c(4, 3, 2, 7), nrow = 2, byrow = TRUE)
# Questão 4 ----
multiply_matrices(L_mat) {
M <- diag(c(1,1))
for (m in L_mat) {
M <- (M %*% m)
}
}
multiply_matrices(
list(
matrix(c(4, 3, 2, 7), nrow = 2, byrow = TRUE),
matrix(c(3, 2, 2, 5), nrow = 2, byrow = TRUE),
matrix(c(1, 5, 2, 3), nrow = 2, byrow = TRUE)
)
)
multiply_matrices <- function(L_mat) {
M <- diag(c(1,1))
for (m in L_mat) {
M <- (M %*% m)
}
}
multiply_matrices(
list(
matrix(c(4, 3, 2, 7), nrow = 2, byrow = TRUE),
matrix(c(3, 2, 2, 5), nrow = 2, byrow = TRUE),
matrix(c(1, 5, 2, 3), nrow = 2, byrow = TRUE)
)
)
multiply_matrices <- function(L_mat) {
M <- diag(c(1,1))
for (m in L_mat) {
(M <- M %*% m)
}
}
multiply_matrices(
list(
matrix(c(4, 3, 2, 7), nrow = 2, byrow = TRUE),
matrix(c(3, 2, 2, 5), nrow = 2, byrow = TRUE),
matrix(c(1, 5, 2, 3), nrow = 2, byrow = TRUE)
)
)
multiply_matrices <- function(L_mat) {
M <- diag(c(1,1))
for (m in L_mat) {
M <- M %*% m
}
print(M)
}
multiply_matrices(
list(
matrix(c(4, 3, 2, 7), nrow = 2, byrow = TRUE),
matrix(c(3, 2, 2, 5), nrow = 2, byrow = TRUE),
matrix(c(1, 5, 2, 3), nrow = 2, byrow = TRUE)
)
)
matrix(c(4, 3, 2, 7), nrow = 2, byrow = TRUE) %*% matrix(c(3, 2, 2, 5), nrow = 2, byrow = TRUE) %*%    matrix(c(1, 5, 2, 3), nrow = 2, byrow = TRUE)
multiply_matrices <- function(L_mat) {
M <- diag(c(1,1))
for (m in L_mat) {
M <- M %*% m
}
M
}
multiply_matrices(
list(
matrix(c(4, 3, 2, 7), nrow = 2, byrow = TRUE),
matrix(c(3, 2, 2, 5), nrow = 2, byrow = TRUE),
matrix(c(1, 5, 2, 3), nrow = 2, byrow = TRUE)
)
)
1== 1 & 2==2
1== 1 & 2==3
1== 1 & 2==2 & 5==5
1==1==1
1==1 & ==1
1 == 1 %>% ==2
A <- matrix(c(9, 2, 7, 4, 6, 8, 5, 10, 3), nrow = 3, byrow = TRUE)
A
is_magic_square <- function(A) {
somas <- c(
sum(diag(A)),
rowSums(A),
colSums(A)
)
len(unique(somas)) == 1
}
A <- matrix(c(9, 2, 7, 4, 6, 8, 5, 10, 3), nrow = 3, byrow = TRUE)
B <- matrix(c(7, 1, 9, 2, 3, 7, 4, 9, 2),  nrow = 3, byrow = TRUE)
is_magic_square(A)
is_magic_square(B)
is_magic_square <- function(A) {
somas <- c(
sum(diag(A)),
rowSums(A),
colSums(A)
)
length(unique(somas)) == 1
}
A <- matrix(c(9, 2, 7, 4, 6, 8, 5, 10, 3), nrow = 3, byrow = TRUE)
B <- matrix(c(7, 1, 9, 2, 3, 7, 4, 9, 2),  nrow = 3, byrow = TRUE)
is_magic_square(A)
is_magic_square(B)
multiply_matrices <- function(L_mat) {
M <- diag(c(1,1))
for (m in L_mat) {
M <- M %*% m
}
M
}
multiply_matrices(
list(
matrix(c(4, 3, 2, 7), nrow = 2, byrow = TRUE),
matrix(c(3, 2, 2, 5), nrow = 2, byrow = TRUE),
matrix(c(1, 5, 2, 3), nrow = 2, byrow = TRUE)
)
)
library(readr)
library(tidyverse)
library(geobr)
library(ggplot2)
library(ggspacial)
municipios <- read_municipality(code_muni = "all", year = 2018)
df <- read_csv("output/base_painel.csv") %>%
filter(ano == 2022) %>%
select(id_municipio, abstencao_1t) %>%
rename("code_muni" = "id_municipio")
data <- left_join(municipios, df, by = "code_muni")
gg <- ggplot() +
geom_sf(data = data, aes(fill = abstencao_1t), color = NA) +
scale_fill_gradient(name = "Abstenções (%)", low = "white", high = "red", na.value = "white", limits = c(0,.5)) +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks = element_blank())
gg
municipios <- read_municipality(code_muni = "all", year = 2018)
municipios <- read_municipality(code_muni = "all", year = 2018)
municipios <- read_municipality(code_muni = "all", year = 2018)
library(readr)
library(tidyverse)
library(geobr)
library(ggplot2)
library(ggspacial)
municipios <- read_municipality(code_muni = "all", year = 2018)
municipios <- read_municipality(code_muni = "all", year = 2018)
library(readr)
library(tidyverse)
library(geobr)
library(ggplot2)
library(ggspacial)
municipios <- read_municipality(code_muni = "all", year = 2018)
municipios <- read_municipality(code_muni = "all", year = 2018)
?read_municipality
library(geobr)
municipios <- read_municipality(code_muni = "all", year = 2018)
municipios <- read_municipality(code_muni = "all", year = 2018)
library(tidyverse)
library(ggrepel)
library(plotly)
table
View(who)
who %>%
pivot_longer(-(country:year), names_to = "key", values_to = "cases") %>%
mutate(key = str_replace(key, "rewrel", "new_rel")) %>%
separate(key, into = c("new", "type", "sex_age"), sep = "_") %>%
separate(sex_age, into = c("sex", "age"), sep = 1) %>%
mutate(sex = str_to_upper(sex)) %>%
separate(age, into = c("min_age", "max_age"), sep = -2)
?paste0
who %>%
pivot_longer(-(country:year), names_to = "key", values_to = "cases") %>%
mutate(key = str_replace(key, "rewrel", "new_rel")) %>%
separate(key, into = c("new", "type", "sex_age"), sep = "_") %>%
separate(sex_age, into = c("sex", "age"), sep = 1) %>%
mutate(sex = str_to_upper(sex)) %>%
separate(age, into = c("min_age", "max_age"), sep = -2) %>%
mutate(age = ifelse(min_age == "", "65+", paste0(min_age, "-", max_age))) %>%
select(country:sex, age, cases, -new, -iso2)
setwd("C:/git/microIV-apsF")
library(readr)
library(tidyverse)
library(geobr)
library(ggplot2)
library(sf)
municipios <- readRDS(file = "municipios.rds")
df <- read_csv("base.csv") %>%
rename("code_muni" = "id_municipio") %>%
mutate(incluso = ifelse(distancia < 150, 1, 0),
grupo = ifelse((tratamento == 1 & incluso == 1), "Tratamento",
ifelse((tratamento == 0 & incluso == 1), "Controle", "Não incluso")))
data <- left_join(municipios, df, by = "code_muni")
gg <- ggplot() +
geom_sf(data = data, aes(fill = grupo), color = "#B3DBCF", lwd = .001) +
scale_fill_manual(values = c("Tratamento" = "#05732f",
"Controle"="#03491e",
"Não incluso"= "#73b97d"))+
theme_void()
gg
df <- read_csv("base.csv") %>%
rename("code_muni" = "id_municipio") %>%
mutate(incluso = ifelse(distancia < 150, 1, 0),
grupo = ifelse((tratamento == 1 & incluso == 1), "Tratamento",
ifelse((tratamento == 0 & incluso == 1), "Controle", "Não incluso")))
data <- left_join(municipios, df, by = "code_muni")
gg <- ggplot() +
geom_sf(data = data, aes(fill = grupo), color = "#B3DBCF", lwd = .001) +
scale_fill_manual(values = c("Tratamento" = "#05732f",
"Controle"="#03491e",
"Não incluso"= "#73b97d"))+
theme_void()
gg
gg <- ggplot() +
geom_sf(data = data, aes(fill = grupo), color = "#73b97d", lwd = .001) +
scale_fill_manual(values = c("Tratamento" = "#05732f",
"Controle"="#03491e",
"Não incluso"= "#73b97d"))+
theme_void()
gg
data
View(data)
#Mapa abstencao
df <- read_csv("base_abstencao.csv") %>%
filter(ano == 2022 & turno == 1)
data
View(data)
View(df)
gg <- ggplot() +
geom_sf(data = df, aes(fill = abstencao), color = NA) +
scale_fill_gradient2(midpoint = median(df$abstencao), low = "#73b97d", mid = "#05732f", high = "#03491e") +
labs(fill = "Abstenção") +
theme_void() +
theme(text = element_text(family = "A"))
gg
data <- left_join(municipios, df, by = "code_muni")
#Mapa abstencao
df <- read_csv("base_abstencao.csv") %>%
rename("code_muni" = "id_municipio") %>%
filter(ano == 2022 & turno == 1)
data <- left_join(municipios, df, by = "code_muni")
gg <- ggplot() +
geom_sf(data = data, aes(fill = abstencao), color = NA) +
scale_fill_gradient2(midpoint = median(df$abstencao), low = "#73b97d", mid = "#05732f", high = "#03491e") +
labs(fill = "Abstenção") +
theme_void() +
theme(text = element_text(family = "A"))
gg
gg <- ggplot() +
geom_sf(data = data, aes(fill = abstencao), color = NA) +
scale_fill_gradient2(midpoint = median(df$abstencao), low = "#73b97d", mid = "#ffcf35", high = "#03491e") +
labs(fill = "Abstenção") +
theme_void() +
theme(text = element_text(family = "A"))
gg
gg <- ggplot() +
geom_sf(data = data, aes(fill = abstencao), color = NA) +
scale_fill_gradient2(midpoint = median(df$abstencao), low = "#ffcf35", mid = "#0D1089", high = "#03491e") +
labs(fill = "Abstenção") +
theme_void() +
theme(text = element_text(family = "A"))
gg
gg <- ggplot() +
geom_sf(data = data, aes(fill = abstencao), color = NA) +
scale_fill_gradient2(midpoint = median(df$abstencao), low = "#0D1089", mid = "#ffcf35", high = "#03491e") +
labs(fill = "Abstenção") +
theme_void() +
theme(text = element_text(family = "A"))
gg
gg <- ggplot() +
geom_sf(data = data, aes(fill = abstencao), color = NA) +
scale_fill_gradient2(midpoint = median(df$abstencao), low = "#03491e", mid = "#ffcf35", high = "#0D1089") +
labs(fill = "Abstenção") +
theme_void() +
theme(text = element_text(family = "A"))
gg
gg <- ggplot() +
geom_sf(data = data, aes(fill = abstencao), color = NA) +
scale_fill_gradient2(midpoint = median(df$abstencao), low = "#22577A", mid = "#ffcf35", high = "#DB2B39") +
labs(fill = "Abstenção") +
theme_void() +
theme(text = element_text(family = "A"))
gg
gg
ggsave("output/map_abstencao.png", gg, dpi = 600, bg='transparent')
ggsave("map_abstencao.png", gg, dpi = 600, bg='transparent')
windowsFonts(A = windowsFont("Posterama"))
gg <- ggplot() +
geom_sf(data = data, aes(fill = abstencao), color = NA) +
scale_fill_gradient2(midpoint = median(df$abstencao), low = "#22577A", mid = "#ffcf35", high = "#DB2B39") +
labs(fill = "Abstenção") +
theme_void() +
theme(text = element_text(family = "A"))
gg
gg <- ggplot() +
geom_sf(data = data, aes(fill = abstencao), color = NA) +
scale_fill_gradient2(midpoint = median(df$abstencao), low = "#22577A", mid = "#ffcf35", high = "#DB2B39") +
labs(fill = "Abstenção") +
theme_void() +
theme(text = element_text(family = "A"),
legend.text=element_text(color="#05732f",size=10),
legend.text=element_text(color="#05732f",size=10))
gg
gg <- ggplot() +
geom_sf(data = data, aes(fill = abstencao), color = NA) +
scale_fill_gradient2(midpoint = median(df$abstencao), low = "#22577A", mid = "#ffcf35", high = "#DB2B39") +
labs(fill = "Abstenção") +
theme_void() +
theme(text = element_text(family = "A"),
legend.text=element_text(color="#05732f",size=10))
gg
gg <- ggplot() +
geom_sf(data = data, aes(fill = abstencao), color = NA) +
scale_fill_gradient2(midpoint = median(df$abstencao), low = "#22577A", mid = "#ffcf35", high = "#DB2B39") +
labs(fill = "Abstenção") +
theme_void() +
theme(text = element_text(family = "A"),
legend.title=element_text(color="#05732f", face="bold",size=12),
legend.text=element_text(color="#05732f", face="bold",size=10))
gg
install.packages("extraFont")
install.packages("extrafont")
library(tidyverse)
library(fixest)
library(modelsummary)
library(MatchIt)
df <- read_csv("data.csv")
df <- df %>%
mutate(incluso = ifelse(distancia < 150, 1, 0)) %>%
filter(incluso == 1)
#Teste placebo----
modelo_placebo <- log(abstencao) ~
log(competitividade) + log(pib_pc) + ideb + log(beneficiados) +
log(pib_governo) + log(eleitores_secao) + i(ano, tratamento, ref= 2006) | id_municipio + ano
modelsummary(list(
feols(modelo_placebo, data = df %>% filter(turno == 1 & ano != 2022)),
feols(modelo_placebo, data = df %>% filter(turno == 2 & ano != 2022))
), stars = TRUE)
#Propensity score matching ----
df.psm <- read_csv("psm.csv") %>%
left_join(df %>% filter(ano == 2022) %>% select(id_municipio, tratamento, turno)) %>%
left_join(df %>% filter(ano == 2018) %>% select(id_municipio, abstencao, turno) %>% rename("abstencao_2018" = "abstencao")) %>%
left_join(df %>% filter(ano <2022) %>% group_by(id_municipio) %>%
summarize(abstencao = mean(abstencao), competitividade = mean(competitividade), pib_pc = mean(pib_pc),
beneficiados = mean(beneficiados), pib_governo = mean(pib_governo),
eleitores_secao = mean(eleitores_secao), tratamento = max(tratamento))) %>%
mutate(populacao_urbana = populacao_urbana/populacao) %>%
drop_na()
modelo_psm <- tratamento ~ razao_dependencia + taxa_envelhecimento + expectativa_anos_estudo +
taxa_analfabetismo_18_mais + indice_gini + prop_pobreza_extrema + log(renda_pc) + idhm +
taxa_desocupacao_18_mais  + taxa_agua_encanada + log(populacao) + populacao_urbana + abstencao_2018 +
log(abstencao) + log(competitividade) + log(pib_pc) + log(beneficiados) + pib_governo + eleitores_secao
#Estimação do propensity
summary(glm(modelo_psm, data = df.psm, family = binomial(link = 'logit')))
modelo_psm <- tratamento ~ taxa_envelhecimento + taxa_analfabetismo_18_mais + indice_gini + prop_pobreza_extrema + log(renda_pc) + idhm +
taxa_desocupacao_18_mais  + log(populacao) + populacao_urbana + log(abstencao) + log(pib_pc) + log(beneficiados) + eleitores_secao + abstencao_2018
match.1t <- matchit(
modelo_psm,
data=df.psm %>% filter(turno == 1), link="probit", replace = T)
match.2t <- matchit(
modelo_psm,
data=df.psm %>% filter(turno == 2), link="probit", replace = T)
#Resultado do balanceamento
plot(match.1t,type="density",interactive=FALSE)
df.1t <- match.1t %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 1)) %>%
select(id_municipio) %>%
left_join(df %>% filter(turno == 1))
df.2t <- match.2t %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df %>% filter(turno == 2))
#Estimação do DD----
modelo <- log(abstencao) ~
log(competitividade) + log(pib_pc) + ideb + log(beneficiados) +
log(pib_governo) + log(eleitores_secao) + tratamento : (ano == 2022) | id_municipio + ano
feols.1t <- feols(modelo, data = df.1t)
feols.2t <- feols(modelo, data = df.2t)
modelsummary(list(
feols.1t,
feols.2t
), stars = T)
#Teste placebo depois do PSM
modelsummary(list(
feols(modelo_placebo, data = df.1t %>% filter(ano != 2022)),
feols(modelo_placebo, data = df.2t %>% filter(ano != 2022))
))
df <- read_csv("base_abstencao.csv") %>%
mutate(distancia = ifelse(tratamento == 1, -distancia, distancia)) %>%
filter(ano == 2018)
ggplot(df, aes(x = distancia, y = abstencao, size = populacao)) +
geom_point(alpha = .1) +
geom_vline(xintercept = 0, linetype = "dashed") +
xlim(c(-150,150))
#Estimação do DD----
modelo <- log(abstencao) ~
log(competitividade) + log(pib_pc) + ideb + log(beneficiados) +
log(pib_governo) + log(eleitores_secao) + tratamento : (ano == 2022) | id_municipio + ano
feols.1t <- feols(modelo, data = df.1t)
feols.2t <- feols(modelo, data = df.2t)
modelsummary(list(
feols.1t,
feols.2t
), stars = T)
